"use client";
import { useLocalStorage } from "../hooks/useLocalStorage";
import { useRouter } from "next/router";
import { useEffect } from "react";

const example = {
  keyStage: "Key Stage 3",
  subject: "Computer Science",
  numberOfTasks: "2",
  maxTasks: "5",
  task: "Draw out and label a diagram of an operating system based on what we covered in the lesson. Make sure to label the main components that we discussed and what the purpose of each one is.",
  actionPlan:
    "This student is autistic and has a reading age of eight. The student needs a reminder of the lesson content chunked into a set of facts that are easy to understand, do not contain any ambiguity and use clear language. The student needs specific tasks and steps to achieve the tasks and cannot be given an open-ended task which could potentially take a long time if they were to not understand how much time to put into it. It should be very clear how the homework will be assessed so that it does not stress the student out. It should include all information that the student needs to be able to complete the text.",
  summary:
    "This lesson introduces the operating system and its role in managing the complexity of modern computing devices. Students will learn about the interaction between the processor, main memory, and storage in executing programs. They will also gain an understanding of what an operating system is and its various functions, such as program execution, memory management, file system organization, input/output, communication, and graphical user interface.",
  objectives: `* Understand the role of the operating system in managing computing devices
  * Explain the interaction between the processor, main memory, and storage
  * Define the functions of an operating system, such as program execution, memory management, file system organization, input/output, communication, and graphical user interface`,
  transcript: `Hi, welcome back. My name's Kashif, your computer science teacher for the Computer Systems unit. In this lesson, we're still looking under the hood, but this time we're looking at the operating system. So make sure you've got a pen, some paper, and you've removed any distractions that are going to stop you from focusing, and once you've done that, let's begin. In this lesson, you will explore how the processor, main memory and storage interact to execute programmes in real scenarios, and define what an operating system is, and provide an overview of what it does. Okay, so let's begin with an activity. So this activity is called forbidden words, and you've got to describe the word on the right hand side without using the key words underneath it. So write down your definition of the word graphics processor. You're not allowed to use the words that are below it. Have a go, let's see how you get on. Okay, let's see. So what did I get? An example could have been, it's the component that manages what is shown on your monitor. Okay, let's try a few more examples. The next word is processor. So the processor is the component that executes programme instructions. An instruction may perform arithmetic or logic operations on data, perform input/output of data or control programme flow. So have a go at this. Okay, let's move on. The next key word is memory. The main memory is the component that stores the programmes and data currently in use. Main memory is volatile, it's contents are lost when the power is off. So once again, let's have a go. And lastly storage. The storage is the set of components that stores programmes and data. Storage is persistent, it retains its contents when the power is off Okay, how did you get on with them? The keywords we did discuss them in the previous lesson. And this was just a recap to kind of get your brains in gear. Let's move on. A scenario. Stella is fascinated with the sky. She takes photos of it during the day and studies it with a telescope at night. The scenario. Stella uses planetarium software to identify the objects that she observes in the night sky. We will examine what happens behind the scenes as she uses the software. But first Stella starts the planetarium software. We're going to have a look at behind the scenes. On the right hand side, you can see the processor, you can see the memory and you can see the storage. So just to recap, the processor was the brains of the computer. It executes them instructions. The memory and the storage, they're all saving things, but memory is short term, so it's lost when the machines off and storage is long term, okay? So we're permanently storing that data. So let's have a look behind the scenes. The programme is copied from storage into the main memory. Celestial object data, which has the names of the stars and the positions, is copied from storage into the main memory. Excuse I threw one. Programme instructions are fetched one by one from the main memory into the processor along with the celestial object data that they will operate on. Each instruction executed by the processor performs an operation on the celestial object data to compute the simulated view of the night sky. Any data resulting from the execution of an instruction is transferred back from the processor into the main memory. Task one scenarios. Examine similar scenarios using your worksheet. Match up the user action with the behind the scenes option. Task one scenarios, using the worksheet complete the images and browser scenario. Resume once you're finished. So how did you get with that task? I hope it wasn't too difficult, but at the same time, I hope it was challenging enough to get you guys thinking. So let's have a look at the solutions. So this scenario was all about Stella editing some images. So when Stella starts the image editing app, the correct answers were, C, the programme is copied from storage into the main memory. And then D, programme instructions are fetched one by one from the main memory into the processor where they are executed. When she's browsing to find the image that she wants to edit and she selects that image, image data is copied from storage, so from the hard drive into the main memory. When she's editing the image, the correct answer is E, programme instructions are fetched one by one from the main memory into the processor, along with the image data that they're going to be operating on. And lastly, when she saves the edited image, image data is copied from the main memory into storage. So that's A. How did you get on? Let's have a look at the second scenario. For this time, Stella is browsing the internet. So when Stella starts the browser, the programme data or the programme is copied from storage into the main memory, then programme instructions are fetched one by one from the main memory into the processor where they're executed. Webpage data is requested and received from a remote computing system. You may have heard of a web browser, they're the same thing. The data is copied into the main memory for immediate processing. Programme instructions are fetched, sorry. So when stellar read through the page, programme instructions are fetched one by one from the main memory into the processor along with the webpage data that they will operate on. And the last couple of answers are the processor into the main memory. How many programmes at once? How many programmes can be executed at the same time? Have a think about this. Okay, let's look at the answer. Just one, at any given time, the processor executes one instruction that is part of one programme. So even though computers are complex machines and you know, one gigahertz worth of processing is a billion instructions cycles a second. In essence, we can only execute one instruction at a time. Let's have a look. So executing multiple programmes. The processor can be made to alternate between executing the instructions of different programmes. This creates the impression of simultaneous programme execution. Modern computers have multiple cores. Each core can execute instructions from a different programme. In the building analogy, this is like having multiple workers. So if you've got multiple workers, they can all be working on different tasks at the same time. This speeds up things considerably but alternation between programmes is still necessary. What determines how the processor time is allocated? What determines where the programmes and data are stored in the main memory? And what determines how the programmes and data are organised in storage? Have a look. It's the operating system, and that's what we're going to be moving on to. Did you get that right? Did you ever think about it before I mentioned it? The operating system. The operating system is a set of programmes that controls the operation of a computer system. On the right hand side, we can see an orchestra. In some ways the operating system is like the conductor of an orchestra. So the operating system, there's a range of tasks that it completes. Some of them are: programme execution, memory management, file system organisation, input and output, communication and graphical user interface. The operating system provides those with a graphical user interface. That's how the system looks. It's the only aspect of the operating system that we actually get to see. So with, for example, the windows operating system, is a graphical operating system where we can click or we can drag things around, however, with some other operating systems such as Linux, is a command line interface where you have to type instructions in order for it to complete certain tasks. Have you heard of the operating system before? And did you have an idea of how important it is? Write your answers down. Okay, so the operating system is a set of programmes that controls the operation of a computing system. We now know that. All computing systems need some kind of operating system in order for them to run. Can you name some examples of operating systems? So if you can write down please some examples and we have some on the next slide. I did actually give you some tips and clues in some of my examples. A tip here is, the operating system is the first programme that a computing system starts executing as soon as it piles up. So if you want to write down your examples and let's see if you get some of the ones that we've got on the next slide. Okay, let's have a look. We've got Microsoft, we've got Android, we've got iOS and we've got Raspberry Pi OS as well. So these are all examples of operating systems. Did you get any of these? We'd love to see the ones that you got. So at the end of this lesson, I'll share with you how you can gain touch on it. Monitoring the system. Monitoring the system, software that monitors our computing system can help us visualise some of its complexities. So we can see measurements for processor load, main memory usage and network activity. On the right hand side, there's a screenshot. Let's have a look at the planetarium software. So the planetarium software is used to simulate the night sky. The numbers on the left correspond to the numbers on the diagram on the right. As we can see the programme starts, the user interacts with the programme, and lastly, the programme is executed. The prototype software is used to simulate the night sky. Upon start-up, the programme and its data are loaded into the main memory. Computation is required throughout to simulate views of the night sky. Upon termination, process load drops and memory resources are released. Now, can you see, there's some network activity when we start up the application? Maybe that's when we're looking for updates. Image editing software is used to rotate a large image. So let's see the usage that's taking place. So the programme starts, the image is loaded, the rotation of the image starts, and then lastly, the programme is terminated. When the image is loaded, it occupies a significant amount of the main memory. The rotation operation requires intensive computation on a large image, memory usage increases as the rotation progresses. And lastly network communication is insignificant. Another example, video streaming. A browser is used to play an online video. So number one, the browser starts. Two, the website with the video is retrieved. Three, the video starts playing, and number four, the browser is terminated. So there's increased computation when the programme starts, the webpage is rendered and the video is played. Memory usage increases at these points. There's substantial amount of computation over the network. Pause the video to complete the task. Using the worksheet, answer the questions on process a load, memory usage and network activities when a user is browsing. Resume, once you're finished. Task two, monitoring the system solution. So let's see what you got. Which of the steps above would you expect to cause the most significant increase in processor load? So what did you get? Did you get, starting the browser and rendering the webpage? If so, well done. If you didn't then make a know of it now and hopefully you'll know for the future. Next question, which of the steps above would you expect to cause the most significant increase in main memory usage? The answer there was starting the browser. And last question, which of the steps above would you expect to cause the most significant increase in network activity? It was requesting the large image. That's the end of the lesson, so thank you very much for your time today, I hope you learned all about the operating system and what it does, and the amazing things that happen inside of a computer. We'd love to see the work that you've produced today, so you can share it with us. Make sure you ask a parent or a carer and you can share it with us on Instagram, Facebook, or Twitter tagging us with the @OakNational or #LearnwithOak. Well done today. You know you worked really hard, I'm really impressed. Let's keep this energy and hopefully I'll see you in the next lesson. Take care.`,
  title: "Operating Systems",
};
const Try = () => {
  const [keyStageInput, setKeyStageInput] = useLocalStorage("keyStage", "");
  const [subjectInput, setSubjectInput] = useLocalStorage("subject", "");
  const [numberOfTasksInput, setNumberOfTasksInput] = useLocalStorage(
    "numberOfTasks",
    "2"
  );
  const [maxTasksInput, setMaxTasksInput] = useLocalStorage("maxTasks", "5");
  const [taskInput, setTaskInput] = useLocalStorage("task", "");
  const [actionPlanInput, setActionPlanInput] = useLocalStorage(
    "actionPlan",
    ""
  );
  const [summaryInput, setSummaryInput] = useLocalStorage("summary", "");
  const [objectivesInput, setObjectivesInput] = useLocalStorage(
    "objectives",
    ""
  );
  const [transcriptInput, setTranscriptInput] = useLocalStorage(
    "transcript",
    ""
  );
  const [titleInput, setTitleInput] = useLocalStorage("title", "");

  const router = useRouter();
  useEffect(() => {
    setKeyStageInput(example.keyStage);
    setSubjectInput(example.subject);
    setNumberOfTasksInput(example.numberOfTasks);
    setMaxTasksInput(example.maxTasks);
    setTaskInput(example.task);
    setActionPlanInput(example.actionPlan);
    setSummaryInput(example.summary);
    setObjectivesInput(example.objectives);
    setTranscriptInput(example.transcript);
    setTitleInput(example.title);

    router.replace("/");
  }, [
    setKeyStageInput,
    setSubjectInput,
    setNumberOfTasksInput,
    setMaxTasksInput,
    setTaskInput,
    setActionPlanInput,
    setSummaryInput,
    setObjectivesInput,
    setTranscriptInput,
    setTitleInput,
  ]);

  return <>Loading…</>;
};

export default Try;
